// Generated by gencpp from file whiskeye_msgs/bridge_u.msg
// DO NOT EDIT!


#ifndef WHISKEYE_MSGS_MESSAGE_BRIDGE_U_H
#define WHISKEYE_MSGS_MESSAGE_BRIDGE_U_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <std_msgs/Float32MultiArray.h>
#include <std_msgs/Float32MultiArray.h>
#include <std_msgs/Float32MultiArray.h>
#include <std_msgs/Bool.h>

namespace whiskeye_msgs
{
template <class ContainerAllocator>
struct bridge_u_
{
  typedef bridge_u_<ContainerAllocator> Type;

  bridge_u_()
    : header()
    , theta()
    , xy()
    , neck()
    , physical()  {
    }
  bridge_u_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , theta(_alloc)
    , xy(_alloc)
    , neck(_alloc)
    , physical(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::std_msgs::Float32MultiArray_<ContainerAllocator>  _theta_type;
  _theta_type theta;

   typedef  ::std_msgs::Float32MultiArray_<ContainerAllocator>  _xy_type;
  _xy_type xy;

   typedef  ::std_msgs::Float32MultiArray_<ContainerAllocator>  _neck_type;
  _neck_type neck;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _physical_type;
  _physical_type physical;




  typedef boost::shared_ptr< ::whiskeye_msgs::bridge_u_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::whiskeye_msgs::bridge_u_<ContainerAllocator> const> ConstPtr;

}; // struct bridge_u_

typedef ::whiskeye_msgs::bridge_u_<std::allocator<void> > bridge_u;

typedef boost::shared_ptr< ::whiskeye_msgs::bridge_u > bridge_uPtr;
typedef boost::shared_ptr< ::whiskeye_msgs::bridge_u const> bridge_uConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::whiskeye_msgs::bridge_u_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::whiskeye_msgs::bridge_u_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace whiskeye_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/msg'], 'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/msg'], 'whiskeye_msgs': ['/mnt/data/Dropbox/HBP/NRP/Whiskeye/Models/whiskeye_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::whiskeye_msgs::bridge_u_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::whiskeye_msgs::bridge_u_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::whiskeye_msgs::bridge_u_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::whiskeye_msgs::bridge_u_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::whiskeye_msgs::bridge_u_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::whiskeye_msgs::bridge_u_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::whiskeye_msgs::bridge_u_<ContainerAllocator> >
{
  static const char* value()
  {
    return "621630dad0a9268cf105346e924f2f5d";
  }

  static const char* value(const ::whiskeye_msgs::bridge_u_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x621630dad0a9268cULL;
  static const uint64_t static_value2 = 0xf105346e924f2f5dULL;
};

template<class ContainerAllocator>
struct DataType< ::whiskeye_msgs::bridge_u_<ContainerAllocator> >
{
  static const char* value()
  {
    return "whiskeye_msgs/bridge_u";
  }

  static const char* value(const ::whiskeye_msgs::bridge_u_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::whiskeye_msgs::bridge_u_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
std_msgs/Header header\n\
std_msgs/Float32MultiArray theta\n\
std_msgs/Float32MultiArray xy\n\
std_msgs/Float32MultiArray neck\n\
std_msgs/Bool physical\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: std_msgs/Float32MultiArray\n\
# Please look at the MultiArrayLayout message definition for\n\
# documentation on all multiarrays.\n\
\n\
MultiArrayLayout  layout        # specification of data layout\n\
float32[]         data          # array of data\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/MultiArrayLayout\n\
# The multiarray declares a generic multi-dimensional array of a\n\
# particular data type.  Dimensions are ordered from outer most\n\
# to inner most.\n\
\n\
MultiArrayDimension[] dim # Array of dimension properties\n\
uint32 data_offset        # padding elements at front of data\n\
\n\
# Accessors should ALWAYS be written in terms of dimension stride\n\
# and specified outer-most dimension first.\n\
# \n\
# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n\
#\n\
# A standard, 3-channel 640x480 image with interleaved color channels\n\
# would be specified as:\n\
#\n\
# dim[0].label  = \"height\"\n\
# dim[0].size   = 480\n\
# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n\
# dim[1].label  = \"width\"\n\
# dim[1].size   = 640\n\
# dim[1].stride = 3*640 = 1920\n\
# dim[2].label  = \"channel\"\n\
# dim[2].size   = 3\n\
# dim[2].stride = 3\n\
#\n\
# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n\
\n\
================================================================================\n\
MSG: std_msgs/MultiArrayDimension\n\
string label   # label of given dimension\n\
uint32 size    # size of given dimension (in type units)\n\
uint32 stride  # stride of given dimension\n\
================================================================================\n\
MSG: std_msgs/Bool\n\
bool data\n\
";
  }

  static const char* value(const ::whiskeye_msgs::bridge_u_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::whiskeye_msgs::bridge_u_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.theta);
      stream.next(m.xy);
      stream.next(m.neck);
      stream.next(m.physical);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct bridge_u_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::whiskeye_msgs::bridge_u_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::whiskeye_msgs::bridge_u_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "theta: ";
    s << std::endl;
    Printer< ::std_msgs::Float32MultiArray_<ContainerAllocator> >::stream(s, indent + "  ", v.theta);
    s << indent << "xy: ";
    s << std::endl;
    Printer< ::std_msgs::Float32MultiArray_<ContainerAllocator> >::stream(s, indent + "  ", v.xy);
    s << indent << "neck: ";
    s << std::endl;
    Printer< ::std_msgs::Float32MultiArray_<ContainerAllocator> >::stream(s, indent + "  ", v.neck);
    s << indent << "physical: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.physical);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WHISKEYE_MSGS_MESSAGE_BRIDGE_U_H
